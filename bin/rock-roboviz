#! /usr/bin/env ruby

require 'vizkit'
require 'optparse'

def try_to_get_task(task_name, retry_on_error=true)
    task = nil
    begin
        task = Orocos.name_service.get task_name
    rescue Exception => e
        if retry_on_error
            puts "Did not find task context '#{task_name}'. Will retry in a second."
            sleep(1)
            return try_to_get_task(task_name)
        else
            return nil
        end
    end
    return task
end

use_test_gui = true
hostname = nil
options = OptionParser.new do |opt|
    opt.banner = <<-EOD
rock-roboviz [options] /path/to/model/file [task context for joint data]
  If no task context is given, a UI window is started to allow changing
  the joint values. Use --no-joint-gui to disable
    EOD
    opt.on '--no-test-gui', 'disable the test GUI if no task context has been given' do
        use_test_gui = false
    end
    opt.on '--host=HOSTNAME', String, 'the host we should contact to find RTT tasks' do |host|
        hostname = host
    end
    opt.on '--help', 'this help message' do
        puts opt
    end
end

args = options.parse(ARGV)
model_file = args.shift
task_context_name = args.shift

if !model_file
    puts "missing model file argument"
    puts options
    exit 1
end

if task_context_name
    if hostname
        Orocos::CORBA.name_service.ip = hostname
    end
    Orocos.initialize
end

view3d = Vizkit.vizkit3d_widget
view3d.show
vis_gui = Vizkit.default_loader.RobotVisualization
vis_gui.modelFile = model_file.dup
vis_gui.jointsSize = 0.02

if task_context_name
    control = try_to_get_task(task_context_name, true)
    #find joint state port
    matching_ports = control.ports.find_all {|p| p.is_a? Orocos::OutputPort and p.type == Types::Base::Samples::Joints}
    if matching_ports.size > 1
      puts "Multiple joint state producer ports. Don't know which to use."
      matching_ports.each do |p| puts p.name end
      exit 1
    end
    if matching_ports.size < 1 
      puts "No joint state producer port available."
      exit 1
    end
    matching_ports[0].connect_to do |data|
        vis_gui.updateData(data)
    end

elsif use_test_gui
    main = Qt::Widget.new
    layout = Qt::VBoxLayout.new(main)
    layout.add_widget(view3d)

    ctrl_gui = Vizkit.default_loader.ControlUi
    override_vel_limits=0
    only_positive=true
    no_effort=true
    no_velocity=true
    ctrl_gui.configureUi(override_vel_limits, only_positive, no_effort, no_velocity)
    ctrl_gui.initFromURDF(model_file.dup)
    ctrl_gui.connect(SIGNAL('sendSignal()')) do 
        sample = ctrl_gui.getJoints()
        vis_gui.updateData(sample)
    end
    layout.add_widget(ctrl_gui)
    main.show
end

Vizkit.exec


